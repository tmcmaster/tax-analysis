define(["exports"],function(_exports){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.getAverageWeeklyWage=getAverageWeeklyWage;_exports.getAverageYearlyWage=getAverageYearlyWage;_exports.getRatioToAverageWage=getRatioToAverageWage;_exports.getRelativeAverageWeeklyWage=getRelativeAverageWeeklyWage;_exports.loadData=loadData;_exports.findBracket=findBracket;_exports.calculateTax=calculateTax;_exports.createBracketByYearMap=createBracketByYearMap;_exports.createGovernmentByYearMap=createGovernmentByYearMap;_exports.sequence=sequence;_exports.generateTaxData=generateTaxData;_exports.generateWageTaxData=generateWageTaxData;_exports.createGraphData=createGraphData;_exports.createGovernmentColorList=createGovernmentColorList;_exports.addBackground=addBackground;_exports.addGraph=addGraph;const BASE_WAGE=200,WAGE_RISE=25,CURRENT_YEAR=2019;// average weekly wage in 1980
function getAverageWeeklyWage(year){let numberOfYears=year-1980,averageWeeklyWage=BASE_WAGE+numberOfYears*WAGE_RISE;return averageWeeklyWage}function getAverageYearlyWage(year){return 52.4*getAverageWeeklyWage(year)}function getRatioToAverageWage(wage){let currentAverageWage=getAverageWeeklyWage(CURRENT_YEAR),ratio=wage/currentAverageWage;return ratio}function getRelativeAverageWeeklyWage(wage,year){let ratio=getRatioToAverageWage(wage),averageWeeklyWage=getAverageWeeklyWage(year);return averageWeeklyWage*ratio}function loadData(successCallback){let governments=void 0,rates=void 0;fetch("data/governments.json").then(data=>data.json()).then(data=>{//console.log('GOVERNMENTS: ', data);
governments=data;fetch("data/rates.json").then(data=>data.json()).then(data=>{//console.log('RATES: ', data);
rates=data;successCallback({governments:governments,rates:rates})})})}function findBracket(brackets,salary){let bracket=brackets.filter(bracket=>salary>=bracket.from&&salary<=bracket.to)[0];return bracket}function calculateTax(brackets,salary){let bracket=findBracket(brackets,salary),taxable=salary-bracket.from,tax=parseInt(bracket.tax)+parseInt(taxable)*parseFloat(bracket.rate);return tax.toFixed(2)}function createBracketByYearMap(rates){let bracketByYear={};rates.forEach(rate=>bracketByYear[parseInt(rate.from)]=rate.bracket);return bracketByYear}function createGovernmentByYearMap(governments){let governmentByYearMap={};governments.forEach(government=>{let from=parseInt(government.from),to=parseInt(government.to);sequence(from,to).forEach(year=>{governmentByYearMap[year]=government})});return governmentByYearMap}function sequence(start,end){let years=[];for(let i=start;i<=end;i++){years.push(i)}return years}function generateTaxData(bracketsByYear,governmentByYear,wage){let ratio=getRatioToAverageWage(wage).toPrecision(2),result=Object.keys(bracketsByYear).sort().map(year=>{return{year:parseInt(year),brackets:bracketsByYear[year]}}).map(info=>{let localSalary=Math.round(getAverageYearlyWage(info.year)*ratio),tax=parseInt(calculateTax(info.brackets,localSalary)),percentTax=Math.ceil(100*(tax/localSalary)),government=governmentByYear[info.year];return babelHelpers.objectSpread({},info,{salary:localSalary,tax:tax,percentTax:percentTax,party:government.party})}).reduce((map,item)=>{let y=parseInt(item.year);map[y]=item;return map},{});return result}function generateWageTaxData(bracketsByYear,governmentByYear,wages){let wageTaxData={};wages.forEach(wage=>{wageTaxData[wage]=generateTaxData(bracketsByYear,governmentByYear,wage)});return wageTaxData}// wageData = {
//     1000: [
//         {year: 1983, percentTax: 23},
//         {year: 1983, percentTax: 23}
//     ],
//     2000: [
//         {year: 1983, percentTax: 23},
//         {year: 1983, percentTax: 23}
//     ]
// };
// graphData = [
//     {year: "1980", 1000: "23", 2000: "52"},
//     {year: "1981", 1000: "22", 2000: "51"}
// ];
function createGraphData(wageData){let years=sequence(1983,2018),wages=Object.keys(wageData),graphData={};years.forEach(year=>{graphData[year]={year:year};Object.keys(wageData).forEach(wage=>{graphData[year][wage]=parseInt(wageData[wage][year].percentTax)})});return Object.values(graphData)}function createGovernmentColorList(governmentByYearMap,start,end){let years=sequence(start,end);return years.map(year=>governmentByYearMap[year]).map(gov=>gov.party).map(party=>{return"Labour"===party?"red":"blue"})}function addBackground(svgId,colors,x,y,w,h){let svg=d3.select(document.getElementById(svgId));colors.forEach((color,i)=>{svg.append("rect").attr("stroke","none").attr("x",x+i*w).attr("y",y).attr("fill-opacity",.3).attr("fill",color).attr("width",w).attr("height",h)})}function addGraph(title,image,colors,x,y,w,h){let body=d3.select(document.body);body.append("h2").text(title);let div=body.append("div").attr("class","image");div.append("img").attr("src","images/"+image);let svg=div.append("svg");colors.forEach((color,i)=>{svg.append("rect").attr("stroke","none").attr("x",x+i*w).attr("y",y).attr("fill-opacity",.3).attr("fill",color).attr("width",w).attr("height",h)})}});